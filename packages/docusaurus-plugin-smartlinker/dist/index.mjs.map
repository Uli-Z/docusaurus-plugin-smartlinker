{"version":3,"sources":["../src/pluginName.ts","../src/options.ts","../src/node/fsScan.ts","../src/frontmatter.ts","../src/codegen/notesEmitter.ts","../src/codegen/registryEmitter.ts","../src/node/buildPipeline.ts","../src/codegen/tooltipComponentsEmitter.ts","../src/node/tooltipMdxCompiler.ts","../src/indexProviderStore.ts","../src/frontmatterAdapter.ts","../src/node/permalinkResolver.ts","../src/logger.ts","../src/debugStore.ts","../src/metricsStore.ts","../src/termUsageStore.ts","../src/fsIndexProvider.ts","../src/index.ts"],"names":["z","safeId","relative","join","pluginName","GLOBAL_KEY","isAbsolute","resolve","termProcessingMs","indexBuildMs","readdirSync","statSync","readFileSync"],"mappings":"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","file":"index.mjs","sourcesContent":["export const PLUGIN_NAME = 'docusaurus-plugin-smartlinker';\nexport const DEFAULT_PLUGIN_ID = 'default';\n","import { z } from 'zod';\nimport { PLUGIN_NAME } from './pluginName.js';\n\nconst TrimmedString = z\n  .string()\n  .transform((value) => value.trim())\n  .refine((value) => value.length > 0, {\n    message: 'Expected a non-empty string',\n  });\n\nconst TooltipComponentSchema = z.union([\n  TrimmedString,\n  z.object({\n    path: TrimmedString,\n    export: TrimmedString.optional(),\n  }),\n]);\n\nconst DebugLevelSchema = z.enum(['error', 'warn', 'info', 'debug', 'trace']);\n\nconst DebugOptionsSchema = z\n  .object({\n    enabled: z.boolean().default(false),\n    level: DebugLevelSchema.default('warn'),\n  })\n  .default({ enabled: false, level: 'warn' });\n\nexport type TooltipComponentConfig = {\n  importPath: string;\n  exportName?: string;\n};\n\nconst TooltipComponentsRecord = z\n  .record(TooltipComponentSchema)\n  .default({})\n  .transform((value) => {\n    const out: Record<string, TooltipComponentConfig> = {};\n    for (const [alias, spec] of Object.entries(value)) {\n      const key = alias.trim();\n      if (!key) continue;\n      if (typeof spec === 'string') {\n        out[key] = { importPath: spec };\n      } else {\n        out[key] = {\n          importPath: spec.path,\n          exportName: spec.export ?? undefined,\n        };\n      }\n    }\n    return out;\n  });\n\nconst FolderSchema = z.object({\n  path: TrimmedString,\n  defaultIcon: TrimmedString.optional(),\n  tooltipComponents: TooltipComponentsRecord,\n});\n\nexport const OptionsSchema = z\n  .object({\n    icons: z.record(TrimmedString).default({}),\n    darkModeIcons: z.record(TrimmedString).optional(),\n    iconProps: z.record(z.unknown()).optional(),\n    folders: z.array(FolderSchema).default([]),\n    debug: DebugOptionsSchema,\n  })\n  .transform((value) => {\n    const aggregated: Record<string, TooltipComponentConfig> = {};\n    for (const folder of value.folders) {\n      for (const [alias, spec] of Object.entries(folder.tooltipComponents)) {\n        if (aggregated[alias]) continue;\n        aggregated[alias] = spec;\n      }\n    }\n    return { ...value, tooltipComponents: aggregated };\n  });\n\nexport type PluginOptions = z.input<typeof OptionsSchema>;\nexport type NormalizedFolderOption = z.output<typeof FolderSchema>;\nexport type NormalizedOptions = z.output<typeof OptionsSchema>;\nexport type DebugOptions = z.output<typeof DebugOptionsSchema>;\n\nexport type OptionsWarning = {\n  code:\n    | 'FOLDERS_REQUIRED'\n    | 'FOLDER_PATH_DUPLICATE'\n    | 'FOLDER_DEFAULT_ICON_UNKNOWN'\n    | 'FOLDER_TOOLTIP_COMPONENT_ALIAS_EMPTY'\n    | 'DARK_MODE_ICON_UNKNOWN'\n    | 'ICON_ID_EMPTY'\n    | 'EMPTY_ICONS_OBJECT'\n  message: string;\n  details?: Record<string, unknown>;\n};\n\nexport type ValidationResult = {\n  options: NormalizedOptions;\n  warnings: OptionsWarning[];\n};\n\n/**\n * Validate and normalize plugin options without side effects.\n * - Ensures objects exist\n * - Adds structured warnings for common misconfigurations\n */\nexport function validateOptions(input: PluginOptions | undefined): ValidationResult {\n  const parsed = OptionsSchema.safeParse(input ?? {});\n  if (!parsed.success) {\n    // Should be rare; Zod already guards shapes.\n    return {\n      options: {\n        icons: {},\n        tooltipComponents: {},\n        folders: [],\n        debug: { enabled: false, level: 'warn' },\n      },\n      warnings: [{\n        code: 'EMPTY_ICONS_OBJECT',\n        message: 'Invalid options; falling back to empty configuration.',\n        details: { issues: parsed.error.issues.map(i => ({ path: i.path, message: i.message })) }\n      }]\n    };\n  }\n\n  const options = parsed.data;\n  const rawFoldersInput: unknown[] = Array.isArray((input as any)?.folders)\n    ? (input as any).folders\n    : [];\n  const warnings: OptionsWarning[] = [];\n\n  // Warn if icons is totally empty (harmless but often unintended)\n  if (!options.icons || Object.keys(options.icons).length === 0) {\n    warnings.push({\n      code: 'EMPTY_ICONS_OBJECT',\n      message: '`icons` is empty; links will render without icons unless pages specify one later and a default is set.',\n    });\n  }\n\n  // Dark-mode overrides should reference existing icon ids\n  if (options.darkModeIcons) {\n    for (const id of Object.keys(options.darkModeIcons)) {\n      if (!options.icons[id]) {\n        warnings.push({\n          code: 'DARK_MODE_ICON_UNKNOWN',\n          message: 'darkModeIcons contains an id not present in `icons`.',\n          details: { id }\n        });\n      }\n    }\n  }\n\n  // Basic sanity: no empty string ids in icons\n  for (const id of Object.keys(options.icons)) {\n    if (!id.trim()) {\n      warnings.push({\n        code: 'ICON_ID_EMPTY',\n        message: 'An icon id is an empty string.',\n      });\n    }\n  }\n\n  if (options.folders.length === 0) {\n    warnings.push({\n      code: 'FOLDERS_REQUIRED',\n      message: '`folders` must list at least one directory to scan.',\n    });\n  }\n\n  const seenFolderPaths = new Map<string, number>();\n  options.folders.forEach((folder, index) => {\n    const normalizedPathRaw = folder.path.replace(/\\\\/g, '/').replace(/\\/+$/, '');\n    const normalizedPath = normalizedPathRaw || '.';\n    const seenCount = seenFolderPaths.get(normalizedPath) ?? 0;\n    if (seenCount > 0) {\n      warnings.push({\n        code: 'FOLDER_PATH_DUPLICATE',\n        message: 'Duplicate folder configuration detected.',\n        details: { path: normalizedPath },\n      });\n    }\n    seenFolderPaths.set(normalizedPath, seenCount + 1);\n\n    if (folder.defaultIcon && !options.icons[folder.defaultIcon]) {\n      warnings.push({\n        code: 'FOLDER_DEFAULT_ICON_UNKNOWN',\n        message: '`defaultIcon` refers to an unknown icon id.',\n        details: { path: normalizedPath, defaultIcon: folder.defaultIcon },\n      });\n    }\n\n    const rawFolder = rawFoldersInput[index];\n    const rawTooltip = rawFolder && typeof rawFolder === 'object'\n      ? (rawFolder as any).tooltipComponents\n      : undefined;\n    if (rawTooltip && typeof rawTooltip === 'object') {\n      for (const alias of Object.keys(rawTooltip)) {\n        if (!String(alias).trim()) {\n          warnings.push({\n            code: 'FOLDER_TOOLTIP_COMPONENT_ALIAS_EMPTY',\n            message: '`tooltipComponents` contains a component key that is empty.',\n            details: { path: normalizedPath },\n          });\n        }\n      }\n    }\n  });\n\n  return { options, warnings };\n}\n\nexport type IconResolution = {\n  /** the chosen icon id (logical id), or null if none is applicable */\n  iconId: string | null;\n  /** returns the concrete asset path for the chosen id & mode */\n  src: string | null;\n};\n\n/**\n * Create resolvers bound to normalized options.\n * Pure & stateless: call per need. You can also call resolve* directly with `opts`.\n */\nexport function createIconResolver(opts: NormalizedOptions) {\n  const warnedMissingIds = new Set<string>();\n\n  const warnMissingIcon = (id: string) => {\n    if (warnedMissingIds.has(id)) {\n      return;\n    }\n    warnedMissingIds.add(id);\n    if (typeof console !== 'undefined' && typeof console.warn === 'function') {\n      console.warn(\n        `[${PLUGIN_NAME}] Requested icon \"${id}\" is not configured. The link will render without that icon.`,\n      );\n    }\n  };\n\n  function resolveIconId(requestedId?: string, mode: 'light' | 'dark' = 'light'): IconResolution {\n    // Helper to compute path if we have a final id\n    const toSrc = (id: string, modeIn: 'light' | 'dark'): string | null => {\n      const override = modeIn === 'dark' ? opts.darkModeIcons?.[id] : undefined;\n      const path = override ?? opts.icons[id];\n      return typeof path === 'string' ? path : null;\n    };\n\n    if (requestedId) {\n      if (opts.icons[requestedId]) {\n        const src = toSrc(requestedId, mode);\n        return { iconId: requestedId, src };\n      }\n      warnMissingIcon(requestedId);\n    }\n\n    return { iconId: null, src: null };\n  }\n\n  function resolveIconSrc(iconId: string, mode: 'light' | 'dark' = 'light'): string | null {\n    const override = mode === 'dark' ? opts.darkModeIcons?.[iconId] : undefined;\n    const path = override ?? opts.icons[iconId];\n    if (!opts.icons[iconId]) {\n      warnMissingIcon(iconId);\n    }\n    return typeof path === 'string' ? path : null;\n  }\n\n  return { resolveIconId, resolveIconSrc, iconProps: opts.iconProps ?? {} };\n}\n","import { readdirSync, readFileSync, statSync } from 'node:fs';\nimport { join, relative } from 'node:path';\nimport type { RawDocFile } from '../types.js';\n\nconst IGNORE = new Set(['node_modules', '.docusaurus', 'build', '.git']);\n\nexport interface ScanOptions {\n  roots: string[];                 // absolute directories to scan\n  exts?: ('.md'|'.mdx')[];\n}\n\nexport function scanMdFiles(opts: ScanOptions): RawDocFile[] {\n  const exts = new Set(opts.exts ?? ['.md', '.mdx']);\n\n  const files: RawDocFile[] = [];\n  for (const root of opts.roots) {\n    walk(root, root);\n  }\n  return files;\n\n  function walk(dir: string, root: string) {\n    let entries: string[] = [];\n    try {\n      entries = readdirSync(dir);\n    } catch {\n      return;\n    }\n    for (const name of entries) {\n      if (IGNORE.has(name)) continue;\n      const p = join(dir, name);\n      let s;\n      try {\n        s = statSync(p);\n      } catch {\n        continue;\n      }\n      if (s.isDirectory()) {\n        walk(p, root);\n      } else {\n        const low = name.toLowerCase();\n        const dot = low.lastIndexOf('.');\n        const ext = dot >= 0 ? low.slice(dot) : '';\n        if (exts.has(ext as any)) {\n          const content = readFileSync(p, 'utf8');\n          const rel = relative(root, p).replace(/\\\\/g, '/');\n          files.push({ path: p, content, relativePath: rel });\n        }\n      }\n    }\n  }\n}\n\n","import matter from 'gray-matter';\nimport { z } from 'zod';\nimport type {\n  RawDocFile,\n  FrontmatterParseResult,\n  IndexRawEntry,\n  FrontmatterWarning,\n} from './types.js';\n\nconst SupportedExt = new Set(['.md', '.mdx']);\n\nconst FM = z.object({\n  id: z.string().optional(),\n  slug: z.string().optional(),\n  title: z.string().optional(),\n  'smartlink-terms': z.array(z.string()).optional(),\n  linkify: z.boolean().optional(),\n  'smartlink-icon': z.string().optional(),\n  'smartlink-short-note': z.string().optional()\n});\n\nfunction isSupportedExt(path: string, extOverride?: string): boolean {\n  const ext = (extOverride ?? path.slice(path.lastIndexOf('.'))).toLowerCase();\n  return SupportedExt.has(ext as any);\n}\n\nfunction normalizeSmartlinkTerms(list: unknown[]): string[] {\n  const seen = new Set<string>();\n  const terms: string[] = [];\n  for (const value of list) {\n    if (typeof value !== 'string') continue;\n    const trimmed = value.trim();\n    if (!trimmed) continue;\n    const key = trimmed.toLocaleLowerCase();\n    if (seen.has(key)) continue;\n    seen.add(key);\n    terms.push(trimmed);\n  }\n  return terms;\n}\n\nfunction pickRelativeCandidate(file: RawDocFile): string | null {\n  if (typeof file.relativePath === 'string' && file.relativePath.trim()) {\n    return file.relativePath.trim();\n  }\n  if (typeof file.path === 'string' && file.path.trim()) {\n    const normalized = file.path.replace(/\\\\/g, '/');\n    const idx = normalized.lastIndexOf('/');\n    return idx >= 0 ? normalized.slice(idx + 1) : normalized;\n  }\n  return null;\n}\n\nfunction inferDefaultSlug(file: RawDocFile): string | null {\n  const candidate = pickRelativeCandidate(file);\n  if (!candidate) return null;\n\n  const normalized = candidate.replace(/\\\\/g, '/');\n  const withoutLeading = normalized.replace(/^\\.+\\/+/, '').replace(/^\\/+/, '');\n  const collapsed = withoutLeading.replace(/\\/+/g, '/');\n  const withoutExt = collapsed.replace(/\\.[^./]+$/, '');\n  const trimmed = withoutExt.replace(/\\/+$/, '');\n  if (!trimmed) return null;\n  return `/${trimmed}`;\n}\n\nexport function parseFrontmatter(files: RawDocFile[]): FrontmatterParseResult {\n  const entries: IndexRawEntry[] = [];\n  const warnings: FrontmatterWarning[] = [];\n\n  for (const file of files) {\n    if (!isSupportedExt(file.path, file.ext)) {\n      warnings.push({\n        path: file.path,\n        code: 'UNSUPPORTED_EXT',\n        message: 'Unsupported extension (only .md/.mdx are processed).'\n      });\n      continue;\n    }\n\n    try {\n      const { data } = matter(file.content ?? '');\n      const res = FM.safeParse(data ?? {});\n      if (!res.success) {\n        warnings.push({\n          path: file.path,\n          code: 'INVALID_TYPE',\n          message: 'Frontmatter has invalid shape.',\n          details: { issues: res.error.issues.map(i => ({ path: i.path, message: i.message })) }\n        });\n        continue;\n      }\n\n      const fm = res.data;\n\n      const linkify = fm.linkify ?? true;\n      if (!linkify) {\n        warnings.push({\n          path: file.path,\n          code: 'LINKIFY_FALSE',\n          message: '`linkify:false` – skipped from index.'\n        });\n        continue;\n      }\n\n      const hasSmartlinkTermsField = Object.prototype.hasOwnProperty.call(fm, 'smartlink-terms');\n      const smartlinkTermsRaw = (fm as any)['smartlink-terms'];\n\n      if (!hasSmartlinkTermsField || typeof smartlinkTermsRaw === 'undefined') {\n        continue;\n      }\n\n      if (!Array.isArray(smartlinkTermsRaw)) {\n        warnings.push({\n          path: file.path,\n          code: 'INVALID_TYPE',\n          message: '`smartlink-terms` must be an array of strings.'\n        });\n        continue;\n      }\n\n      const terms = normalizeSmartlinkTerms(smartlinkTermsRaw);\n      if (terms.length === 0) {\n        warnings.push({\n          path: file.path,\n          code: 'EMPTY_SMARTLINK_TERMS',\n          message: '`smartlink-terms` must include at least one non-empty string.'\n        });\n        continue;\n      }\n\n      const id = (fm.id ?? '').trim();\n      if (!id) {\n        warnings.push({\n          path: file.path,\n          code: 'EMPTY_ID',\n          message: 'Missing required `id`.'\n        });\n        continue;\n      }\n\n      let slug = (fm.slug ?? '').trim();\n      if (!slug) {\n        slug = inferDefaultSlug(file) ?? '';\n      }\n      if (!slug) {\n        warnings.push({\n          path: file.path,\n          code: 'MISSING_REQUIRED',\n          message: 'Unable to determine slug – please add a `slug` or ensure file path can be inferred.'\n        });\n        continue;\n      }\n      if (!slug.startsWith('/')) {\n        warnings.push({\n          path: file.path,\n          code: 'INVALID_TYPE',\n          message: '`slug` must start with `/`.',\n          details: { slug }\n        });\n        continue;\n      }\n\n      const shortRaw = typeof (fm as any)['smartlink-short-note'] === 'string'\n        ? (fm as any)['smartlink-short-note'].trim()\n        : '';\n      const shortNote = shortRaw ? shortRaw : undefined;\n\n      const iconRaw = typeof (fm as any)['smartlink-icon'] === 'string'\n        ? (fm as any)['smartlink-icon'].trim()\n        : '';\n      const icon = iconRaw ? iconRaw : undefined;\n\n      entries.push({\n        id,\n        slug,\n        terms,\n        linkify: true,\n        icon,\n        shortNote,\n        sourcePath: file.path,\n        folderId: file.folderId\n      });\n    } catch (err: any) {\n      warnings.push({\n        path: file.path,\n        code: 'INVALID_TYPE',\n        message: 'Failed to parse frontmatter.',\n        details: { error: String(err?.message ?? err) }\n      });\n      continue;\n    }\n  }\n\n  return { entries, warnings };\n}\n","// Note: dynamic import to avoid resolving ESM-only deps at plugin load time\n\n/**\n * Result of emitting an ESM module for a given shortNote.\n */\nexport interface NoteModule {\n  filename: string;   // e.g., \"notes/amoxicillin.js\"\n  contents: string;   // ESM source string\n}\n\n/**\n * Sanitize an id into a safe filename segment.\n */\nfunction safeId(id: string): string {\n  return id.toLowerCase().replace(/[^a-z0-9-_]+/g, '-').replace(/^-+|-+$/g, '');\n}\n\n/**\n * Compile a shortNote (MDX string) into an ESM module that exports:\n *   export function ShortNote(props)\n *\n * The compiled MDXContent will receive props.components as its MDX components map,\n * so that custom tags (e.g., <DrugTip/>) can be provided by the caller at render time.\n *\n * @param id stable page id (used to generate filename)\n * @param shortNote raw MDX string (already trimmed by the frontmatter parser)\n * @returns NoteModule or null if shortNote is empty/undefined\n */\nexport type CompileMdx = (\n  value: string,\n  options?: Record<string, unknown>\n) => Promise<{ value: unknown }>;\n\nexport async function emitShortNoteModule(\n  id: string,\n  shortNote?: string,\n  compileMdx?: CompileMdx\n): Promise<NoteModule | null> {\n  const sn = (shortNote ?? '').trim();\n  if (!sn) return null;\n\n  try {\n    const compile =\n      compileMdx ?? (await import('@mdx-js/mdx')).compile;\n\n    // Compile MDX into ESM (string); MDX v3 defaults to the automatic runtime.\n    const compiled = await compile(sn, {\n      // Important: keep ESM output (string), we will wrap it into our TSX module.\n      // We do not inject provider import source here; we pass components via props.\n      development: false,\n      // Ensure we output a full \"program\" so we can wrap/re-export cleanly.\n      outputFormat: 'program',\n    });\n\n    // compiled.value is a string of ESM JS, typically exporting `MDXContent`.\n    const esm = String(compiled.value);\n\n    // Wrap into a TSX module that re-exports a stable API.\n    // We forward `components` through to MDXContent so <DrugTip/> etc. resolve.\n    const mod = `\n/* AUTO-GENERATED: do not edit by hand */\nimport * as React from 'react';\n\n// The MDX compiler output:\n${esm}\n\n// Stable wrapper API expected by the theme:\nexport function ShortNote(props) {\n  const { components, ...rest } = props ?? {};\n  const mdxProps = components ? { components, ...rest } : rest;\n  // MDXContent is the default export from the compiled MDX above\n  return React.createElement(MDXContent, mdxProps);\n}\n`.trimStart();\n\n    const filename = `notes/${safeId(id)}.js`;\n    return { filename, contents: mod };\n  } catch {\n    // If MDX compilation fails (e.g., due to ESM loader issues), fall back to ReactMarkdown\n    const text = JSON.stringify(sn);\n    const mod = `\n/* AUTO-GENERATED: fallback markdown note */\nimport * as React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nexport function ShortNote(props) {\n  const { components, ...rest } = props ?? {};\n  return React.createElement(\n    ReactMarkdown,\n    components ? { components, ...rest } : rest,\n    ${text}\n  );\n}\n`.trimStart();\n    const filename = `notes/${safeId(id)}.js`;\n    return { filename, contents: mod };\n  }\n}\n","import type { IndexRawEntry } from '../types.js';\nimport type { NoteModule } from './notesEmitter.js';\n\nexport interface TooltipEntry {\n  id: string;\n  slug: string;\n  permalink?: string;\n  icon?: string;\n  ShortNote?: React.FC<{ components?: Record<string, any> }>;\n}\n\nexport interface RegistryModule {\n  filename: string;\n  contents: string;\n}\n\n/**\n * Emit a registry TSX module that imports all ShortNote components\n * and exposes them in a map keyed by entry.id.\n */\nexport function emitRegistry(\n  entries: IndexRawEntry[],\n  noteModules: NoteModule[]\n): RegistryModule {\n  const imports: string[] = [];\n  const records: string[] = [];\n\n  // Create quick lookup from filename base → NoteModule\n  const noteById = new Map<string, NoteModule>();\n  for (const m of noteModules) {\n    const base = m.filename.replace(/^notes\\//, '').replace(/\\.js$/, '');\n    noteById.set(base, m);\n  }\n\n  // Sort entries by id for deterministic output\n  const sorted = [...entries].sort((a, b) => a.id.localeCompare(b.id));\n\n  for (const e of sorted) {\n    const safeId = e.id.toLowerCase().replace(/[^a-z0-9-_]+/g, '-').replace(/^-+|-+$/g, '');\n    const note = noteById.get(safeId);\n\n    let shortNoteField = '';\n    if (note) {\n      const importName = `ShortNote_${safeId.replace(/-/g, '_')}`;\n      imports.push(`import { ShortNote as ${importName} } from './${note.filename}';`);\n      shortNoteField = `ShortNote: ${importName},`;\n    }\n\n    const iconField = e.icon ? `    icon: \"${e.icon}\",\\n` : '';\n    const permalinkField = `    permalink: \"${e.slug}\",\\n`;\n    const shortField = shortNoteField ? `    ${shortNoteField}\\n` : '';\n\n    records.push(`  \"${e.id}\": {\n    id: \"${e.id}\",\n    slug: \"${e.slug}\",\n${permalinkField}${iconField}${shortField}  }`);\n  }\n\n  const mod = `\n/* AUTO-GENERATED REGISTRY */\nimport * as React from 'react';\n${imports.join('\\n')}\n\nexport const registry = {\n${records.join(',\\n')}\n};\n`.trimStart();\n\n  return { filename: 'registry.js', contents: mod };\n}\n\n","import type { RawDocFile, IndexRawEntry } from '../types.js';\nimport { parseFrontmatter } from '../frontmatter.js';\nimport {\n  emitShortNoteModule,\n  type NoteModule,\n  type CompileMdx,\n} from '../codegen/notesEmitter.js';\nimport { emitRegistry, type RegistryModule } from '../codegen/registryEmitter.js';\n\n/**\n * Pure build pipeline used by the plugin:\n * - parse frontmatter\n * - compile notes (async)\n * - emit registry\n */\nexport interface BuildArtifacts {\n  entries: IndexRawEntry[];\n  notes: NoteModule[];\n  registry: RegistryModule;\n}\n\nexport interface BuildArtifactsOptions {\n  compileMdx?: CompileMdx;\n}\n\nexport async function buildArtifacts(\n  files: RawDocFile[],\n  options?: BuildArtifactsOptions\n): Promise<BuildArtifacts> {\n  const { entries } = parseFrontmatter(files);\n\n  // Compile notes for entries with shortNote\n  const notes: NoteModule[] = [];\n  const compile = options?.compileMdx;\n  for (const e of entries) {\n    if (e.shortNote) {\n      const mod = await emitShortNoteModule(e.id, e.shortNote, compile);\n      if (mod) notes.push(mod);\n    }\n  }\n\n  // Emit registry (imports will refer to the emitted `notes/<id>.js`)\n  const registry = emitRegistry(entries, notes);\n\n  return { entries, notes, registry };\n}\n\n","import type { TooltipComponentConfig } from '../options.js';\n\nexport interface TooltipComponentsModule {\n  filename: string;\n  contents: string;\n}\n\n/**\n * Emit a runtime module that statically imports user-provided React components\n * so MDX short notes can render custom tags inside tooltips.\n */\nexport function emitTooltipComponentsModule(\n  components: Record<string, TooltipComponentConfig>\n): TooltipComponentsModule {\n  const entries = Object.entries(components);\n  const imports: string[] = [];\n  const assignments: string[] = [];\n\n  for (const [idx, [alias, spec]] of entries.entries()) {\n    const localName = `TooltipComponent_${idx}`;\n    if (spec.exportName) {\n      imports.push(\n        `import { ${spec.exportName} as ${localName} } from '${spec.importPath}';`\n      );\n    } else {\n      imports.push(`import ${localName} from '${spec.importPath}';`);\n    }\n    assignments.push(`  ${JSON.stringify(alias)}: ${localName}`);\n  }\n\n  const importBlock = imports.length > 0 ? `${imports.join('\\n')}\\n\\n` : '';\n  const recordsBlock = assignments.length > 0 ? `${assignments.join(',\\n')}\\n` : '';\n\n  const contents = `\n/* AUTO-GENERATED: tooltip component registry */\n${importBlock}export const tooltipComponents = {\n${recordsBlock}};\n`.trimStart();\n\n  return { filename: 'tooltipComponents.js', contents };\n}\n","import { join } from 'node:path';\nimport { createProcessorUncached } from '@docusaurus/mdx-loader/lib/processor.js';\nimport type { Options as MdxLoaderOptions } from '@docusaurus/mdx-loader';\nimport type { LoadContext } from '@docusaurus/types';\nimport type { CompileMdx } from '../codegen/notesEmitter.js';\n\nfunction resolveStaticDirs(siteDir: string, relative: readonly string[] | undefined) {\n  return (relative ?? []).map(dir => join(siteDir, dir));\n}\n\nexport async function createTooltipMdxCompiler(\n  context: LoadContext\n): Promise<CompileMdx> {\n  const { siteDir, siteConfig } = context;\n  const mdxOptions: MdxLoaderOptions = {\n    siteDir,\n    staticDirs: resolveStaticDirs(siteDir, siteConfig.staticDirectories),\n    markdownConfig: siteConfig.markdown,\n    remarkPlugins: [],\n    rehypePlugins: [],\n    recmaPlugins: [],\n    beforeDefaultRemarkPlugins: [],\n    beforeDefaultRehypePlugins: [],\n    admonitions: false,\n  };\n\n  const processor = await createProcessorUncached({\n    options: mdxOptions,\n    format: 'mdx',\n  });\n\n  let counter = 0;\n\n  return async (value: string) => {\n    counter += 1;\n    const filePath = join(\n      siteDir,\n      '.docusaurus',\n      'docusaurus-plugin-smartlinker',\n      `tooltip-note-${counter}.mdx`\n    );\n\n    const result = await processor.process({\n      content: value,\n      filePath,\n      frontMatter: {},\n      compilerName: 'client',\n    });\n\n    return { value: result.content };\n  };\n}\n","import type { IndexRawEntry } from './types.js';\nimport type { IndexProvider, TargetInfo } from './fsIndexProvider.js';\n\nconst GLOBAL_KEY = Symbol.for('docusaurus-plugin-smartlinker.indexProvider');\n\nlet currentProvider: IndexProvider | undefined;\n\nfunction readGlobalProvider(): IndexProvider | undefined {\n  const store = globalThis as Record<PropertyKey, unknown>;\n  const value = store[GLOBAL_KEY];\n  if (value && typeof value === 'object') {\n    return value as IndexProvider;\n  }\n  return undefined;\n}\n\nfunction writeGlobalProvider(provider: IndexProvider | undefined): void {\n  const store = globalThis as Record<PropertyKey, unknown>;\n  if (!provider) {\n    delete store[GLOBAL_KEY];\n  } else {\n    store[GLOBAL_KEY] = provider;\n  }\n}\n\nfunction toTargets(entries: IndexRawEntry[]): TargetInfo[] {\n  return entries.map((entry) => ({\n    id: entry.id,\n    slug: entry.slug,\n    icon: entry.icon,\n    sourcePath: entry.sourcePath,\n    terms: entry.terms,\n    folderId: entry.folderId ?? null,\n  }));\n}\n\nexport function setIndexEntries(entries: IndexRawEntry[]): void {\n  const targets = toTargets(entries);\n\n  currentProvider = {\n    getAllTargets() {\n      return targets;\n    },\n    getCurrentFilePath(file) {\n      if (file && typeof file.path === 'string') {\n        return file.path;\n      }\n      return '';\n    },\n  };\n\n  writeGlobalProvider(currentProvider);\n}\n\nexport function getIndexProvider(): IndexProvider | undefined {\n  return currentProvider ?? readGlobalProvider();\n}\n\nexport function clearIndexProvider(): void {\n  currentProvider = undefined;\n  writeGlobalProvider(undefined);\n}\n","import type { RawDocFile, FrontmatterParseResult } from './types.js';\nimport { parseFrontmatter } from './frontmatter.js';\n\n/**\n * Thin adapter kept for future evolution (e.g., integrating with Docusaurus content files).\n * For now, it simply delegates to parseFrontmatter.\n */\nexport function loadIndexFromFiles(files: RawDocFile[]): FrontmatterParseResult {\n  return parseFrontmatter(files);\n}\n","import { relative } from 'node:path';\nimport type {\n  LoadedContent as DocsLoadedContent,\n  LoadedVersion as DocsLoadedVersion,\n  DocMetadata as DocsDocMetadata,\n} from '@docusaurus/plugin-content-docs';\nimport type { IndexRawEntry } from '../types.js';\n\nexport interface EntryWithResolvedUrl {\n  id: string;\n  slug: string;\n  icon?: string;\n  folderId?: string;\n  docId?: string | null;\n  permalink?: string;\n}\n\nexport interface ResolvePermalinkOptions {\n  siteDir: string;\n  entries: Array<IndexRawEntry & { docId?: string | null }>;\n  docsContent?: Record<string, DocsLoadedContent | undefined> | undefined;\n}\n\nfunction toAliasedSitePath(siteDir: string, absPath: string | undefined): string | null {\n  if (!absPath) return null;\n  const rel = relative(siteDir, absPath);\n  if (!rel || rel.startsWith('..')) return null;\n  return `@site/${rel.replace(/\\\\/g, '/')}`;\n}\n\ninterface DocLookups {\n  byDocId: Map<string, DocsDocMetadata>;\n  bySource: Map<string, DocsDocMetadata>;\n  byFrontmatterId: Map<string, DocsDocMetadata>;\n  bySlug: Map<string, DocsDocMetadata>;\n  byPermalink: Map<string, DocsDocMetadata>;\n}\n\nfunction buildDocLookups(\n  docsContent: Record<string, DocsLoadedContent | undefined> | undefined,\n): DocLookups {\n  const byDocId = new Map<string, DocsDocMetadata>();\n  const bySource = new Map<string, DocsDocMetadata>();\n  const byFrontmatterId = new Map<string, DocsDocMetadata>();\n  const bySlug = new Map<string, DocsDocMetadata>();\n  const byPermalink = new Map<string, DocsDocMetadata>();\n\n  if (!docsContent) {\n    return { byDocId, bySource, byFrontmatterId, bySlug, byPermalink };\n  }\n\n  const register = (doc: DocsDocMetadata | undefined) => {\n    if (!doc) return;\n    if (doc.id && !byDocId.has(doc.id)) byDocId.set(doc.id, doc);\n    if (doc.source) {\n      const normalized = doc.source.replace(/\\\\/g, '/');\n      if (!bySource.has(normalized)) bySource.set(normalized, doc);\n    }\n    const fmId = (doc as any)?.frontMatter?.id;\n    if (typeof fmId === 'string' && fmId.trim() && !byFrontmatterId.has(fmId.trim())) {\n      byFrontmatterId.set(fmId.trim(), doc);\n    }\n    if (doc.slug && doc.slug.trim() && !bySlug.has(doc.slug.trim())) {\n      bySlug.set(doc.slug.trim(), doc);\n    }\n    if (doc.permalink && doc.permalink.trim() && !byPermalink.has(doc.permalink.trim())) {\n      byPermalink.set(doc.permalink.trim(), doc);\n    }\n  };\n\n  for (const content of Object.values(docsContent)) {\n    if (!content) continue;\n    const versions = (content.loadedVersions ?? []) as DocsLoadedVersion[];\n    for (const version of versions) {\n      const docs = (version.docs ?? []) as DocsDocMetadata[];\n      for (const doc of docs) register(doc);\n    }\n  }\n\n  return { byDocId, bySource, byFrontmatterId, bySlug, byPermalink };\n}\n\nexport function resolveEntryPermalinks(options: ResolvePermalinkOptions): EntryWithResolvedUrl[] {\n  const { entries, siteDir, docsContent } = options;\n  const lookups = buildDocLookups(docsContent);\n\n  return entries.map((entry) => {\n    const alias = toAliasedSitePath(siteDir, entry.sourcePath);\n\n    let doc: DocsDocMetadata | undefined;\n\n    if (entry.docId) {\n      doc = lookups.byDocId.get(entry.docId);\n    }\n\n    if (!doc && alias) {\n      doc = lookups.bySource.get(alias);\n    }\n\n    if (!doc) {\n      doc = lookups.byFrontmatterId.get(entry.id);\n    }\n\n    if (!doc && entry.slug) {\n      doc = lookups.bySlug.get(entry.slug) ?? lookups.byPermalink.get(entry.slug);\n    }\n\n    const permalink = doc?.permalink ? doc.permalink.trim() : undefined;\n    const docId = entry.docId ?? doc?.id ?? null;\n\n    return {\n      id: entry.id,\n      slug: entry.slug,\n      icon: entry.icon,\n      folderId: entry.folderId,\n      docId,\n      permalink,\n    } satisfies EntryWithResolvedUrl;\n  });\n}\n","import type { DebugOptions } from './options.js';\n\nexport type LogLevel = 'error' | 'warn' | 'info' | 'debug' | 'trace';\n\nconst LOG_LEVELS: readonly LogLevel[] = ['error', 'warn', 'info', 'debug', 'trace'];\nconst LEVEL_RANK: Record<LogLevel, number> = {\n  error: 0,\n  warn: 1,\n  info: 2,\n  debug: 3,\n  trace: 4,\n};\n\nconst LEVEL_COLORS: Record<LogLevel, string> = {\n  error: '\\u001b[31m',\n  warn: '\\u001b[33m',\n  info: '\\u001b[36m',\n  debug: '\\u001b[35m',\n  trace: '\\u001b[90m',\n};\n\nconst COLOR_RESET = '\\u001b[0m';\n\ntype LogDetailRecord = Record<string, unknown>;\ntype LogDetails = LogDetailRecord | (() => LogDetailRecord | undefined) | undefined;\n\ntype ConsoleMethod = (message?: any, ...optionalParams: any[]) => void;\n\nexport interface LoggerInit {\n  pluginName: string;\n  debug: DebugOptions;\n  /**\n   * Optionally override the process environment (used for tests).\n   */\n  env?: NodeJS.ProcessEnv;\n  /**\n   * Optionally override the timestamp factory (used for tests).\n   */\n  now?: () => Date;\n}\n\nexport interface PluginLogger {\n  level: LogLevel;\n  isLevelEnabled(level: LogLevel): boolean;\n  log(level: LogLevel, context: string, message: string, details?: LogDetails): void;\n  error(context: string, message: string, details?: LogDetails): void;\n  warn(context: string, message: string, details?: LogDetails): void;\n  info(context: string, message: string, details?: LogDetails): void;\n  debug(context: string, message: string, details?: LogDetails): void;\n  trace(context: string, message: string, details?: LogDetails): void;\n  child(context: string): ContextLogger;\n}\n\nexport interface ContextLogger {\n  context: string;\n  level: LogLevel;\n  isLevelEnabled(level: LogLevel): boolean;\n  log(level: LogLevel, message: string, details?: LogDetails): void;\n  error(message: string, details?: LogDetails): void;\n  warn(message: string, details?: LogDetails): void;\n  info(message: string, details?: LogDetails): void;\n  debug(message: string, details?: LogDetails): void;\n  trace(message: string, details?: LogDetails): void;\n}\n\nexport interface DebugResolution {\n  config: DebugOptions;\n  source: 'config' | 'env';\n  appliedOverrides: {\n    enabled?: boolean;\n    level?: LogLevel;\n  };\n  invalidLevel?: string;\n}\n\nfunction normalizeBoolean(value: string): boolean {\n  const normalized = value.trim().toLowerCase();\n  if (!normalized) {\n    return false;\n  }\n  if (['0', 'false', 'no', 'off', 'disable', 'disabled'].includes(normalized)) {\n    return false;\n  }\n  if (['1', 'true', 'yes', 'on', 'enable', 'enabled'].includes(normalized)) {\n    return true;\n  }\n  return true;\n}\n\nfunction normalizeLevel(value: string): LogLevel | undefined {\n  const normalized = value.trim().toLowerCase();\n  if (LOG_LEVELS.includes(normalized as LogLevel)) {\n    return normalized as LogLevel;\n  }\n  return undefined;\n}\n\nfunction shouldUseColor(env: NodeJS.ProcessEnv | undefined): boolean {\n  if (typeof process === 'undefined') {\n    return false;\n  }\n  const stdout: typeof process.stdout | undefined = (process as any).stdout;\n  if (!stdout || typeof stdout.isTTY !== 'boolean') {\n    return false;\n  }\n  if (!stdout.isTTY) {\n    return false;\n  }\n  const ci = env?.CI ?? process.env?.CI;\n  if (typeof ci === 'string' && ci !== '' && ci !== '0' && ci.toLowerCase() !== 'false') {\n    return false;\n  }\n  return true;\n}\n\nfunction getConsoleMethod(level: LogLevel): ConsoleMethod {\n  if (level === 'error' && typeof console.error === 'function') {\n    return console.error.bind(console);\n  }\n  if (level === 'warn' && typeof console.warn === 'function') {\n    return console.warn.bind(console);\n  }\n  return typeof console.log === 'function' ? console.log.bind(console) : () => {};\n}\n\nfunction formatFieldValue(value: unknown): string | undefined {\n  if (value === undefined) {\n    return undefined;\n  }\n  if (value === null) {\n    return 'null';\n  }\n  if (typeof value === 'string') {\n    if (!value) {\n      return \"''\";\n    }\n    if (/\\s/.test(value) || /[\"'\\\\]/.test(value)) {\n      return JSON.stringify(value);\n    }\n    return value;\n  }\n  if (typeof value === 'number' || typeof value === 'boolean' || typeof value === 'bigint') {\n    return String(value);\n  }\n  if (value instanceof Date) {\n    return value.toISOString();\n  }\n  try {\n    return JSON.stringify(value);\n  } catch {\n    return String(value);\n  }\n}\n\nfunction formatDetails(details: LogDetailRecord | undefined): string {\n  if (!details) {\n    return '';\n  }\n  const parts: string[] = [];\n  for (const [key, rawValue] of Object.entries(details)) {\n    const formatted = formatFieldValue(rawValue);\n    if (formatted === undefined) continue;\n    parts.push(`${key}=${formatted}`);\n  }\n  return parts.length > 0 ? ` ${parts.join(' ')}` : '';\n}\n\nfunction resolveDetails(details: LogDetails): LogDetailRecord | undefined {\n  if (!details) {\n    return undefined;\n  }\n  if (typeof details === 'function') {\n    try {\n      return details();\n    } catch {\n      return undefined;\n    }\n  }\n  return details;\n}\n\nexport function resolveDebugConfig(\n  base: DebugOptions | undefined,\n  env: NodeJS.ProcessEnv = process.env,\n): DebugResolution {\n  const fallback: DebugOptions = base ?? { enabled: false, level: 'warn' };\n  let enabled = fallback.enabled ?? false;\n  let level: LogLevel = (fallback.level as LogLevel) ?? 'warn';\n  let source: DebugResolution['source'] = 'config';\n  const appliedOverrides: DebugResolution['appliedOverrides'] = {};\n  let invalidLevel: string | undefined;\n\n  const envEnabledRaw = env?.DOCUSAURUS_PLUGIN_DEBUG;\n  if (typeof envEnabledRaw === 'string') {\n    enabled = normalizeBoolean(envEnabledRaw);\n    appliedOverrides.enabled = enabled;\n    source = 'env';\n  }\n\n  const envLevelRaw = env?.DOCUSAURUS_PLUGIN_DEBUG_LEVEL;\n  if (typeof envLevelRaw === 'string') {\n    const normalized = normalizeLevel(envLevelRaw);\n    if (normalized) {\n      level = normalized;\n      appliedOverrides.level = normalized;\n      source = 'env';\n    } else {\n      invalidLevel = envLevelRaw;\n    }\n  }\n\n  if (!LOG_LEVELS.includes(level)) {\n    level = 'warn';\n  }\n\n  return {\n    config: { enabled, level },\n    source,\n    appliedOverrides,\n    invalidLevel,\n  };\n}\n\nexport function createLogger(init: LoggerInit): PluginLogger {\n  const { pluginName, debug } = init;\n  const env = init.env ?? process.env;\n  const now = init.now ?? (() => new Date());\n\n  const active = Boolean(debug?.enabled);\n  const thresholdLevel: LogLevel = (debug?.level as LogLevel) ?? 'warn';\n  const threshold = LEVEL_RANK[thresholdLevel] ?? LEVEL_RANK.warn;\n  const colorize = shouldUseColor(env);\n\n  const isLevelEnabled = (level: LogLevel): boolean => {\n    if (!active) return false;\n    return LEVEL_RANK[level] <= threshold;\n  };\n\n  const write = (level: LogLevel, context: string, message: string, details?: LogDetails) => {\n    if (!isLevelEnabled(level)) {\n      return;\n    }\n    const consoleMethod = getConsoleMethod(level);\n    const timestamp = now().toISOString();\n    const levelTag = `[${level.toUpperCase()}]`;\n    const coloredLevel = colorize ? `${LEVEL_COLORS[level]}${levelTag}${COLOR_RESET}` : levelTag;\n    const pluginTag = `[${pluginName}]`;\n    const contextTag = context ? ` [${context}]` : '';\n    const resolvedDetails = resolveDetails(details);\n    const detailStr = formatDetails(resolvedDetails);\n    const line = `${timestamp} ${coloredLevel} ${pluginTag}${contextTag} ${message}${detailStr}`.trimEnd();\n    consoleMethod(line);\n  };\n\n  const log = (level: LogLevel, context: string, message: string, details?: LogDetails) => {\n    write(level, context, message, details);\n  };\n\n  const makeLevelLogger = (level: LogLevel) => {\n    return (context: string, message: string, details?: LogDetails) => {\n      log(level, context, message, details);\n    };\n  };\n\n  const child = (context: string): ContextLogger => {\n    const scopedLog = (level: LogLevel, message: string, details?: LogDetails) => {\n      log(level, context, message, details);\n    };\n    const makeScoped = (level: LogLevel) => {\n      return (message: string, details?: LogDetails) => {\n        scopedLog(level, message, details);\n      };\n    };\n    return {\n      context,\n      level: thresholdLevel,\n      isLevelEnabled,\n      log: scopedLog,\n      error: makeScoped('error'),\n      warn: makeScoped('warn'),\n      info: makeScoped('info'),\n      debug: makeScoped('debug'),\n      trace: makeScoped('trace'),\n    };\n  };\n\n  return {\n    level: thresholdLevel,\n    isLevelEnabled,\n    log,\n    error: makeLevelLogger('error'),\n    warn: makeLevelLogger('warn'),\n    info: makeLevelLogger('info'),\n    debug: makeLevelLogger('debug'),\n    trace: makeLevelLogger('trace'),\n    child,\n  };\n}\n","import type { DebugOptions } from './options.js';\n\nconst GLOBAL_KEY = Symbol.for('docusaurus-plugin-smartlinker.debug');\n\nexport function setDebugConfig(config: DebugOptions | undefined): void {\n  const store = globalThis as Record<PropertyKey, unknown>;\n  if (!config) {\n    delete store[GLOBAL_KEY];\n  } else {\n    store[GLOBAL_KEY] = config;\n  }\n}\n\nexport function getDebugConfig(): DebugOptions | undefined {\n  const store = globalThis as Record<PropertyKey, unknown>;\n  const value = store[GLOBAL_KEY];\n  if (value && typeof value === 'object') return value as DebugOptions;\n  return undefined;\n}\n\n","let termProcessingMs = 0;\nlet indexBuildMs = 0;\n\nfunction normalizeDuration(value: number): number {\n  if (!Number.isFinite(value) || value < 0) {\n    return 0;\n  }\n  return Number(value.toFixed(2));\n}\n\nexport function recordTermProcessingMs(durationMs: number): void {\n  const normalized = normalizeDuration(durationMs);\n  if (normalized <= 0) {\n    return;\n  }\n  termProcessingMs += normalized;\n}\n\nexport function getTermProcessingMs(): number {\n  return Number(termProcessingMs.toFixed(2));\n}\n\nexport function consumeTermProcessingMs(): number {\n  const total = getTermProcessingMs();\n  termProcessingMs = 0;\n  return total;\n}\n\nexport function resetTermProcessingMs(): void {\n  termProcessingMs = 0;\n}\n\nexport function recordIndexBuildMs(durationMs: number): void {\n  const normalized = normalizeDuration(durationMs);\n  if (normalized <= 0) {\n    return;\n  }\n  indexBuildMs += normalized;\n}\n\nexport function getIndexBuildMs(): number {\n  return Number(indexBuildMs.toFixed(2));\n}\n\nexport function consumeIndexBuildMs(): number {\n  const total = getIndexBuildMs();\n  indexBuildMs = 0;\n  return total;\n}\n\nexport function resetIndexBuildMs(): void {\n  indexBuildMs = 0;\n}\n\nexport function resetMetrics(): void {\n  resetTermProcessingMs();\n  resetIndexBuildMs();\n}\n","import { isAbsolute, normalize, resolve } from 'node:path';\n\ninterface TermUsageState {\n  byTerm: Map<string, Set<string>>;\n  byDoc: Map<string, Set<string>>;\n}\n\nconst GLOBAL_KEY = Symbol.for('docusaurus-plugin-smartlinker.termUsage');\n\ntype GlobalStore = Record<PropertyKey, unknown>;\n\nfunction getState(): TermUsageState {\n  const store = globalThis as GlobalStore;\n  const existing = store[GLOBAL_KEY];\n  if (\n    existing &&\n    typeof existing === 'object' &&\n    existing instanceof Object &&\n    'byTerm' in (existing as any) &&\n    'byDoc' in (existing as any)\n  ) {\n    const candidate = existing as TermUsageState;\n    if (candidate.byTerm instanceof Map && candidate.byDoc instanceof Map) {\n      return candidate;\n    }\n  }\n\n  const fresh: TermUsageState = {\n    byTerm: new Map<string, Set<string>>(),\n    byDoc: new Map<string, Set<string>>(),\n  };\n  store[GLOBAL_KEY] = fresh;\n  return fresh;\n}\n\nfunction normalizeDocPath(docPath: string | null | undefined): string | null {\n  if (!docPath || typeof docPath !== 'string') return null;\n  const trimmed = docPath.trim();\n  if (!trimmed) return null;\n  const abs = isAbsolute(trimmed) ? trimmed : resolve(trimmed);\n  try {\n    return normalize(abs).replace(/\\\\/g, '/');\n  } catch {\n    return abs.replace(/\\\\/g, '/');\n  }\n}\n\nfunction updateTermBindings(\n  state: TermUsageState,\n  docPath: string,\n  nextTerms: Set<string>,\n): void {\n  const prevTerms = state.byDoc.get(docPath);\n  if (prevTerms) {\n    for (const term of prevTerms) {\n      const docs = state.byTerm.get(term);\n      if (!docs) continue;\n      docs.delete(docPath);\n      if (docs.size === 0) {\n        state.byTerm.delete(term);\n      }\n    }\n  }\n\n  if (nextTerms.size === 0) {\n    state.byDoc.delete(docPath);\n    return;\n  }\n\n  state.byDoc.set(docPath, nextTerms);\n  for (const term of nextTerms) {\n    const docs = state.byTerm.get(term) ?? new Set<string>();\n    docs.add(docPath);\n    state.byTerm.set(term, docs);\n  }\n}\n\nexport function updateDocTermUsage(\n  docPath: string | null | undefined,\n  termIds: Iterable<string>,\n): void {\n  const normalizedPath = normalizeDocPath(docPath);\n  if (!normalizedPath) return;\n\n  const terms = new Set<string>();\n  for (const id of termIds) {\n    if (!id) continue;\n    const trimmed = `${id}`.trim();\n    if (!trimmed) continue;\n    terms.add(trimmed);\n  }\n\n  const state = getState();\n  updateTermBindings(state, normalizedPath, terms);\n}\n\nexport function removeDocTermUsage(docPath: string | null | undefined): void {\n  updateDocTermUsage(docPath, []);\n}\n\nexport function getDocsReferencingTerms(termIds: Iterable<string>): string[] {\n  const state = getState();\n  const docs = new Set<string>();\n  for (const id of termIds) {\n    if (!id) continue;\n    const trimmed = `${id}`.trim();\n    if (!trimmed) continue;\n    const registered = state.byTerm.get(trimmed);\n    if (!registered) continue;\n    for (const doc of registered) {\n      docs.add(doc);\n    }\n  }\n  return Array.from(docs);\n}\n\nexport function resetTermUsage(): void {\n  const state = getState();\n  state.byTerm.clear();\n  state.byDoc.clear();\n}\n","import { scanMdFiles } from './node/fsScan.js';\nimport { loadIndexFromFiles } from './frontmatterAdapter.js';\n\nexport interface FsIndexProviderOptions {\n  roots: string[]; // absolute directories to scan\n}\n\nexport interface TargetInfo {\n  id: string;\n  slug: string;\n  icon?: string;\n  sourcePath: string;\n  terms: string[];\n  folderId?: string | null;\n}\n\nexport interface IndexProvider {\n  getAllTargets(): TargetInfo[];\n  getCurrentFilePath(file: { path?: string }): string;\n}\n\n/**\n * Create a docusaurus-plugin-smartlinker/remark IndexProvider by scanning the file system\n * for MD/MDX files and parsing their frontmatter.\n */\nexport function createFsIndexProvider(opts: FsIndexProviderOptions): IndexProvider {\n  const resolvedRoots = (opts.roots ?? []).map((root) => {\n    const normalized = root.replace(/\\\\/g, '/').replace(/\\/+$/, '');\n    return { path: root, id: normalized || '.' };\n  });\n\n  const files = resolvedRoots.flatMap((root) => {\n    const scanned = scanMdFiles({ roots: [root.path] });\n    return scanned.map((file) => ({ ...file, folderId: root.id }));\n  });\n\n  const { entries } = loadIndexFromFiles(files);\n\n  const targets: TargetInfo[] = entries.map(e => ({\n    id: e.id,\n    slug: e.slug,\n    icon: e.icon,\n    sourcePath: e.sourcePath,\n    terms: e.terms,\n    folderId: e.folderId ?? null,\n  }));\n\n  return {\n    getAllTargets() {\n      return targets;\n    },\n    getCurrentFilePath(file) {\n      return file.path || '';\n    },\n  };\n}\n","import { dirname, join, resolve, relative, isAbsolute } from 'node:path';\nimport { readdirSync, readFileSync, statSync, existsSync, utimesSync } from 'node:fs';\nimport { Buffer } from 'node:buffer';\nimport { fileURLToPath } from 'node:url';\nimport { performance } from 'node:perf_hooks';\nimport type { Plugin } from '@docusaurus/types';\nimport type { LoadContext, PluginContentLoadedActions } from '@docusaurus/types';\nimport {\n  validateOptions,\n  type PluginOptions,\n  type NormalizedOptions,\n  type NormalizedFolderOption,\n} from './options.js';\nimport { scanMdFiles } from './node/fsScan.js';\nimport { buildArtifacts } from './node/buildPipeline.js';\nimport type { IndexRawEntry, RawDocFile } from './types.js';\nimport type { NoteModule } from './codegen/notesEmitter.js';\nimport type { RegistryModule } from './codegen/registryEmitter.js';\nimport { emitTooltipComponentsModule } from './codegen/tooltipComponentsEmitter.js';\nimport { PLUGIN_NAME } from './pluginName.js';\nimport { createTooltipMdxCompiler } from './node/tooltipMdxCompiler.js';\nimport { setIndexEntries } from './indexProviderStore.js';\nimport { loadIndexFromFiles } from './frontmatterAdapter.js';\nimport { resolveEntryPermalinks, type EntryWithResolvedUrl } from './node/permalinkResolver.js';\nimport type { LoadedContent as DocsLoadedContent } from '@docusaurus/plugin-content-docs';\nimport { resolveDebugConfig, createLogger, type LogLevel } from './logger.js';\nimport { setDebugConfig } from './debugStore.js';\nimport {\n  recordIndexBuildMs,\n  resetMetrics,\n  consumeIndexBuildMs,\n  consumeTermProcessingMs,\n} from './metricsStore.js';\nimport { getDocsReferencingTerms } from './termUsageStore.js';\n\nexport type {\n  FsIndexProviderOptions,\n  IndexProvider,\n  TargetInfo,\n} from './fsIndexProvider.js';\nexport { createFsIndexProvider } from './fsIndexProvider.js';\nexport { PLUGIN_NAME } from './pluginName.js';\nexport { getIndexProvider } from './indexProviderStore.js';\n// Re-export logger utilities for reuse by the remark package\nexport { resolveDebugConfig, createLogger, type LogLevel } from './logger.js';\nexport type { DebugOptions } from './options.js';\nexport { getDebugConfig, setDebugConfig } from './debugStore.js';\nexport {\n  recordIndexBuildMs,\n  resetMetrics,\n  resetTermProcessingMs,\n  recordTermProcessingMs,\n  resetIndexBuildMs,\n  consumeIndexBuildMs,\n  consumeTermProcessingMs,\n  getIndexBuildMs,\n  getTermProcessingMs,\n} from './metricsStore.js';\nexport { updateDocTermUsage, removeDocTermUsage, resetTermUsage } from './termUsageStore.js';\n\nexport type { PluginOptions } from './options.js';\n\ntype Content = {\n  entries: IndexRawEntry[];\n  notes: NoteModule[];\n  registry: RegistryModule;\n  opts: NormalizedOptions;\n};\n\ntype ResolvedFolder = NormalizedFolderOption & {\n  absPath: string;\n  id: string;\n};\n\ntype OnFilesChangeParams = {\n  changedFiles: string[];\n  deletedFiles: string[];\n};\n\ntype WatchCapablePlugin<Content> = Plugin<Content> & {\n  onFilesChange?: (params: OnFilesChangeParams) => Promise<void> | void;\n};\n\nfunction normalizeFolderId(siteDir: string, absPath: string): string {\n  const relPath = relative(siteDir, absPath);\n  const useRelative =\n    relPath &&\n    !relPath.startsWith('..') &&\n    !isAbsolute(relPath);\n  const candidate = useRelative ? relPath : absPath;\n  const normalized = candidate.replace(/\\\\/g, '/').replace(/\\/+$/, '');\n  return normalized || '.';\n}\n\nconst moduleDir = dirname(fileURLToPath(import.meta.url));\nconst pluginName = PLUGIN_NAME;\n\nfunction publishGlobalData(\n  actions: PluginContentLoadedActions,\n  opts: NormalizedOptions,\n  entries: EntryWithResolvedUrl[],\n) {\n  const registryMeta = entries.map(({ id, slug, icon, folderId, docId, permalink }) => ({\n    id,\n    slug,\n    icon: icon ?? null,\n    folderId: folderId ?? null,\n    docId: docId ?? null,\n    permalink: permalink ?? null,\n  }));\n\n  actions.setGlobalData({ options: opts, entries: registryMeta });\n}\n\nexport default function smartlinkerPlugin(\n  _context: LoadContext,\n  optsIn?: PluginOptions\n): Plugin<Content> {\n  const { options: validatedOptions, warnings } = validateOptions(optsIn);\n  const debugResolution = resolveDebugConfig(validatedOptions.debug);\n  const normOpts: NormalizedOptions = {\n    ...validatedOptions,\n    debug: debugResolution.config,\n  };\n\n  // Make debug configuration available globally so the remark transformer\n  // can mirror the same logging behavior without separate config.\n  setDebugConfig(normOpts.debug);\n  resetMetrics();\n\n  if (normOpts.folders.length === 0) {\n    throw new Error(\n      `[${pluginName}] Configure at least one folder via the \\`folders\\` option.`\n    );\n  }\n\n  const logger = createLogger({ pluginName, debug: normOpts.debug });\n  const initLogger = logger.child('init');\n  const optionsLogger = logger.child('options');\n  const scanLogger = logger.child('scan');\n  const indexLogger = logger.child('index');\n  const loadLogger = logger.child('loadContent');\n  const contentLogger = logger.child('contentLoaded');\n  const webpackLogger = logger.child('configureWebpack');\n  const postBuildLogger = logger.child('postBuild');\n  const watchLogger = logger.child('watch');\n\n  const stats = {\n    scannedFileCount: 0,\n    entryCount: 0,\n    noteCount: 0,\n    resolvedCount: 0,\n    reusedPrimedFiles: false,\n    registryBytes: 0,\n    indexBuildMs: 0,\n    termProcessingMs: 0,\n  };\n\n  const shouldMeasure = (\n    log: { isLevelEnabled(level: LogLevel): boolean },\n    ...levels: LogLevel[]\n  ): boolean => levels.some((level) => log.isLevelEnabled(level));\n\n  const startTimer = (\n    log: { isLevelEnabled(level: LogLevel): boolean },\n    ...levels: LogLevel[]\n  ): number | null => (shouldMeasure(log, ...levels) ? performance.now() : null);\n\n  const endTimer = (start: number | null): number | undefined => {\n    if (start === null) return undefined;\n    return Number((performance.now() - start).toFixed(2));\n  };\n\n  const formatSiteRelativePath = (absPath: string): string => {\n    const relPath = relative(_context.siteDir, absPath);\n    const useRel = relPath && !relPath.startsWith('..') && !isAbsolute(relPath);\n    const normalized = (useRel ? relPath : absPath).replace(/\\\\/g, '/');\n    return normalized || '.';\n  };\n\n  if (\n    debugResolution.invalidLevel &&\n    typeof console !== 'undefined' &&\n    typeof console.warn === 'function'\n  ) {\n    console.warn(\n      `[${pluginName}] Ignoring DOCUSAURUS_PLUGIN_DEBUG_LEVEL=\"${debugResolution.invalidLevel}\" (expected one of: error, warn, info, debug, trace).`\n    );\n  }\n\n  if (normOpts.debug.enabled && initLogger.isLevelEnabled('info')) {\n    initLogger.info('Debug mode enabled', {\n      level: normOpts.debug.level,\n      source: debugResolution.source,\n    });\n  }\n\n  if (initLogger.isLevelEnabled('debug')) {\n    initLogger.debug('Smartlinker plugin initialized', {\n      folderCount: normOpts.folders.length,\n      iconCount: Object.keys(normOpts.icons ?? {}).length,\n    });\n  }\n\n  const resolvedFolders: ResolvedFolder[] = normOpts.folders.map((folder) => {\n    const absPath = resolve(_context.siteDir, folder.path);\n    return {\n      ...folder,\n      absPath,\n      id: normalizeFolderId(_context.siteDir, absPath),\n    } satisfies ResolvedFolder;\n  });\n\n  if (initLogger.isLevelEnabled('trace') && resolvedFolders.length > 0) {\n    initLogger.trace('Resolved SmartLink folders', () => ({\n      folders: resolvedFolders.map(\n        (folder) => `${folder.id}:${formatSiteRelativePath(folder.absPath)}`\n      ),\n    }));\n  }\n\n  const folderById = new Map<string, ResolvedFolder>();\n  for (const folder of resolvedFolders) {\n    folderById.set(folder.id, folder);\n  }\n\n  if (warnings.length > 0 && optionsLogger.isLevelEnabled('warn')) {\n    for (const warning of warnings) {\n      optionsLogger.warn(warning.message, () => ({\n        code: warning.code,\n        ...(warning.details ?? {}),\n      }));\n    }\n  }\n\n  let primedFiles: RawDocFile[] | null = null;\n  let cachedEntries: IndexRawEntry[] = [];\n  let cachedEntrySignatures = new Map<string, string>();\n  let cachedEntriesBySource = new Map<string, IndexRawEntry[]>();\n\n  const toAbsolutePath = (filePath: string): string =>\n    isAbsolute(filePath) ? filePath : resolve(_context.siteDir, filePath);\n\n  const normalizeFsPath = (filePath: string): string => {\n    if (!filePath) {\n      return _context.siteDir.replace(/\\\\/g, '/');\n    }\n    const abs = toAbsolutePath(filePath);\n    return abs.replace(/\\\\/g, '/');\n  };\n\n  const buildWatchPattern = (absPath: string): string => {\n    const normalized = normalizeFsPath(absPath).replace(/\\/+$/, '');\n    return `${normalized}/**/*.{md,mdx}`;\n  };\n\n  const collectFiles = (): RawDocFile[] => {\n    const start = startTimer(scanLogger, 'debug', 'info');\n    const files: RawDocFile[] = [];\n    for (const folder of resolvedFolders) {\n      const scanned = scanMdFiles({ roots: [folder.absPath] });\n      for (const file of scanned) {\n        files.push({ ...file, folderId: folder.id });\n      }\n    }\n    stats.scannedFileCount = files.length;\n\n    if (scanLogger.isLevelEnabled('debug')) {\n      scanLogger.debug('Scanned SmartLink folders', {\n        folderCount: resolvedFolders.length,\n        fileCount: files.length,\n        durationMs: endTimer(start),\n      });\n    }\n\n    if (scanLogger.isLevelEnabled('trace') && files.length > 0) {\n      scanLogger.trace('Collected SmartLink files', () => ({\n        files: files.map((file) => formatSiteRelativePath(file.path)),\n      }));\n    }\n\n    return files;\n  };\n\n  const computeEntrySignature = (entry: IndexRawEntry): string =>\n    JSON.stringify({\n      slug: entry.slug,\n      terms: [...entry.terms],\n      icon: entry.icon ?? null,\n      shortNote: entry.shortNote ?? null,\n      folderId: entry.folderId ?? null,\n      sourcePath: normalizeFsPath(entry.sourcePath ?? ''),\n    });\n\n  const refreshEntryCaches = (entries: IndexRawEntry[]) => {\n    cachedEntries = entries.map((entry) => ({ ...entry }));\n    const signatures = new Map<string, string>();\n    const bySource = new Map<string, IndexRawEntry[]>();\n    for (const entry of entries) {\n      signatures.set(entry.id, computeEntrySignature(entry));\n      const key = normalizeFsPath(entry.sourcePath ?? '');\n      const list = bySource.get(key);\n      if (list) {\n        list.push(entry);\n      } else {\n        bySource.set(key, [entry]);\n      }\n    }\n    cachedEntrySignatures = signatures;\n    cachedEntriesBySource = bySource;\n  };\n\n  const isPathWithinFolder = (absPath: string): boolean => {\n    for (const folder of resolvedFolders) {\n      const relPath = relative(folder.absPath, absPath);\n      if (!relPath || (!relPath.startsWith('..') && !isAbsolute(relPath))) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const filterRelevantPaths = (paths: string[]): Set<string> => {\n    const relevant = new Set<string>();\n    for (const candidate of paths) {\n      if (!candidate) continue;\n      const absPath = normalizeFsPath(candidate);\n      if (isPathWithinFolder(absPath)) {\n        relevant.add(absPath);\n      }\n    }\n    return relevant;\n  };\n\n  const diffEntryState = (\n    nextEntries: IndexRawEntry[],\n    impactedPaths: Set<string>,\n  ): {\n    impactedTermIds: Set<string>;\n    addedTermIds: Set<string>;\n    removedTermIds: Set<string>;\n    changedTermIds: Set<string>;\n  } => {\n    const impactedTermIds = new Set<string>();\n    const nextBySource = new Map<string, IndexRawEntry[]>();\n    const nextSignatures = new Map<string, string>();\n\n    for (const entry of nextEntries) {\n      const sourceKey = normalizeFsPath(entry.sourcePath ?? '');\n      const arr = nextBySource.get(sourceKey);\n      if (arr) {\n        arr.push(entry);\n      } else {\n        nextBySource.set(sourceKey, [entry]);\n      }\n      nextSignatures.set(entry.id, computeEntrySignature(entry));\n    }\n\n    for (const path of impactedPaths) {\n      const prevEntries = cachedEntriesBySource.get(path);\n      if (prevEntries) {\n        for (const entry of prevEntries) {\n          impactedTermIds.add(entry.id);\n        }\n      }\n      const nextEntriesForPath = nextBySource.get(path);\n      if (nextEntriesForPath) {\n        for (const entry of nextEntriesForPath) {\n          impactedTermIds.add(entry.id);\n        }\n      }\n    }\n\n    const addedTermIds = new Set<string>();\n    const removedTermIds = new Set<string>();\n    const changedTermIds = new Set<string>();\n\n    for (const [id, signature] of nextSignatures) {\n      const previous = cachedEntrySignatures.get(id);\n      if (previous === undefined) {\n        addedTermIds.add(id);\n        changedTermIds.add(id);\n      } else if (previous !== signature) {\n        changedTermIds.add(id);\n      }\n    }\n\n    for (const [id] of cachedEntrySignatures) {\n      if (!nextSignatures.has(id)) {\n        removedTermIds.add(id);\n        changedTermIds.add(id);\n      }\n    }\n\n    return { impactedTermIds, addedTermIds, removedTermIds, changedTermIds };\n  };\n\n  const applyFolderDefaults = (entries: IndexRawEntry[]) => {\n    for (const entry of entries) {\n      const folder = entry.folderId ? folderById.get(entry.folderId) : undefined;\n      if (!folder) continue;\n      if (!entry.icon && folder.defaultIcon && normOpts.icons[folder.defaultIcon]) {\n        entry.icon = folder.defaultIcon;\n      }\n    }\n  };\n\n  const computeDocIdForEntry = (entry: IndexRawEntry): string | undefined => {\n    const folder = entry.folderId ? folderById.get(entry.folderId) : undefined;\n    if (!folder) return undefined;\n    return deriveDocId(folder.absPath, entry.sourcePath);\n  };\n\n  const primeIndexProvider = () => {\n    const start = startTimer(indexLogger, 'debug', 'info');\n    primedFiles = collectFiles();\n    const indexBuildStart = performance.now();\n    const { entries } = loadIndexFromFiles(primedFiles);\n    applyFolderDefaults(entries);\n    setIndexEntries(entries);\n    refreshEntryCaches(entries);\n    stats.entryCount = entries.length;\n    recordIndexBuildMs(performance.now() - indexBuildStart);\n\n    if (indexLogger.isLevelEnabled('debug')) {\n      indexLogger.debug('Primed SmartLink index provider', {\n        entryCount: entries.length,\n        durationMs: endTimer(start),\n      });\n    }\n\n    if (indexLogger.isLevelEnabled('trace') && entries.length > 0) {\n      indexLogger.trace('Primed entry identifiers', () => ({\n        entryIds: entries.map((entry) => entry.id),\n      }));\n    }\n  };\n\n  primeIndexProvider();\n\n  const plugin: WatchCapablePlugin<Content> = {\n    name: pluginName,\n\n    getPathsToWatch() {\n      const patterns = new Set<string>();\n      for (const folder of resolvedFolders) {\n        patterns.add(buildWatchPattern(folder.absPath));\n      }\n      return Array.from(patterns);\n    },\n\n    configureWebpack() {\n      if (webpackLogger.isLevelEnabled('debug')) {\n        webpackLogger.debug('configureWebpack invoked', {\n          tooltipComponentCount: Object.keys(normOpts.tooltipComponents ?? {}).length,\n        });\n      }\n      return {};\n    },\n\n    async loadContent() {\n      const usingPrimed = primedFiles !== null;\n      const start = startTimer(loadLogger, 'info', 'debug');\n      const files = primedFiles ?? collectFiles();\n      primedFiles = null;\n      stats.reusedPrimedFiles = usingPrimed;\n      stats.scannedFileCount = files.length;\n\n      if (loadLogger.isLevelEnabled('debug')) {\n        loadLogger.debug('Building SmartLink artifacts', {\n          fileCount: files.length,\n          reusedPrimedFiles: usingPrimed,\n        });\n      }\n\n      if (loadLogger.isLevelEnabled('trace') && files.length > 0) {\n        loadLogger.trace('Processing SmartLink files', () => ({\n          files: files.map((file) => formatSiteRelativePath(file.path)),\n        }));\n      }\n\n      const compileMdx = await createTooltipMdxCompiler(_context);\n      const indexBuildStart = performance.now();\n      const { entries, notes, registry } = await buildArtifacts(files, {\n        compileMdx,\n      });\n      recordIndexBuildMs(performance.now() - indexBuildStart);\n\n      stats.entryCount = entries.length;\n      stats.noteCount = notes.length;\n      stats.registryBytes = Buffer.byteLength(registry.contents, 'utf8');\n\n      applyFolderDefaults(entries);\n      // Update in-memory index for remark consumers first\n      setIndexEntries(entries);\n\n      // Detect term changes compared to previous cache and proactively\n      // trigger rebuild of docs that reference affected term IDs.\n      // This covers dev watch scenarios where Docusaurus does not call a\n      // dedicated onFilesChange hook.\n      try {\n        const { changedTermIds, addedTermIds, removedTermIds } = diffEntryState(\n          entries,\n          new Set<string>(),\n        );\n        if (changedTermIds.size > 0) {\n          const docsForReload = new Set<string>(\n            getDocsReferencingTerms(changedTermIds)\n          );\n          const touchedDocs: string[] = [];\n          if (docsForReload.size > 0) {\n            const now = new Date();\n            for (const docPath of docsForReload) {\n              const absDocPath = normalizeFsPath(docPath);\n              if (!existsSync(absDocPath)) continue;\n              try {\n                utimesSync(absDocPath, now, now);\n                touchedDocs.push(absDocPath);\n              } catch (error) {\n                if (watchLogger.isLevelEnabled('warn')) {\n                  watchLogger.warn(\n                    'Failed to mark SmartLink consumer for rebuild',\n                    () => ({\n                      file: formatSiteRelativePath(absDocPath),\n                      error:\n                        error instanceof Error ? error.message : String(error),\n                    })\n                  );\n                }\n              }\n            }\n          }\n\n          if (watchLogger.isLevelEnabled('info')) {\n            watchLogger.info('Detected SmartLink term changes', {\n              changedTermCount: changedTermIds.size,\n              addedTermCount: addedTermIds.size,\n              removedTermCount: removedTermIds.size,\n              rebuiltDocCount: touchedDocs.length,\n            });\n          }\n\n          if (watchLogger.isLevelEnabled('debug')) {\n            watchLogger.debug('SmartLink change details', () => ({\n              changedTermIds: Array.from(changedTermIds),\n              addedTermIds: Array.from(addedTermIds),\n              removedTermIds: Array.from(removedTermIds),\n              rebuiltDocs: touchedDocs.map((p) => formatSiteRelativePath(p)),\n            }));\n          }\n        }\n      } catch (err) {\n        if (watchLogger.isLevelEnabled('warn')) {\n          watchLogger.warn('SmartLink change detection failed', () => ({\n            error: err instanceof Error ? err.message : String(err),\n          }));\n        }\n      }\n\n      // Refresh caches after change detection so subsequent diffs compare\n      // against the latest state.\n      refreshEntryCaches(entries);\n\n      if (loadLogger.isLevelEnabled('info')) {\n        loadLogger.info('Completed SmartLink artifact build', {\n          entryCount: entries.length,\n          noteCount: notes.length,\n          durationMs: endTimer(start),\n        });\n      }\n\n      if (loadLogger.isLevelEnabled('debug')) {\n        loadLogger.debug('Registry artifacts prepared', {\n          registryBytes: stats.registryBytes,\n        });\n      }\n\n      if (loadLogger.isLevelEnabled('trace') && entries.length > 0) {\n        loadLogger.trace('Generated SmartLink entries', () => ({\n          entryIds: entries.map((entry) => entry.id),\n          noteFiles: notes.map((note) => note.filename),\n        }));\n      }\n\n      return {\n        entries,\n        notes,\n        registry,\n        opts: normOpts,\n      } satisfies Content;\n    },\n\n    async onFilesChange({ changedFiles, deletedFiles }: OnFilesChangeParams) {\n      const candidates = [...(changedFiles ?? []), ...(deletedFiles ?? [])];\n      const relevantPaths = filterRelevantPaths(candidates);\n\n      if (relevantPaths.size === 0) {\n        if (watchLogger.isLevelEnabled('trace')) {\n          watchLogger.trace('No SmartLink folders affected by file change', () => ({\n            changedFiles: changedFiles ?? [],\n            deletedFiles: deletedFiles ?? [],\n          }));\n        }\n        return;\n      }\n\n      const start = startTimer(watchLogger, 'info', 'debug');\n      const files = collectFiles();\n      primedFiles = files;\n      stats.scannedFileCount = files.length;\n\n      const indexBuildStart = performance.now();\n      const { entries } = loadIndexFromFiles(files);\n      applyFolderDefaults(entries);\n      recordIndexBuildMs(performance.now() - indexBuildStart);\n\n      const { impactedTermIds, addedTermIds, removedTermIds, changedTermIds } = diffEntryState(\n        entries,\n        relevantPaths,\n      );\n\n      setIndexEntries(entries);\n      refreshEntryCaches(entries);\n      stats.entryCount = entries.length;\n\n      const docsForReload = new Set<string>(getDocsReferencingTerms(changedTermIds));\n      const touchedDocs: string[] = [];\n      if (docsForReload.size > 0) {\n        const now = new Date();\n        for (const docPath of docsForReload) {\n          const absDocPath = normalizeFsPath(docPath);\n          if (!existsSync(absDocPath)) continue;\n          try {\n            utimesSync(absDocPath, now, now);\n            touchedDocs.push(absDocPath);\n          } catch (error) {\n            if (watchLogger.isLevelEnabled('warn')) {\n              watchLogger.warn('Failed to mark SmartLink consumer for rebuild', () => ({\n                file: formatSiteRelativePath(absDocPath),\n                error: error instanceof Error ? error.message : String(error),\n              }));\n            }\n          }\n        }\n      }\n\n      if (watchLogger.isLevelEnabled('info')) {\n        watchLogger.info('SmartLink watch rebuild complete', {\n          scannedFileCount: files.length,\n          changedTermCount: changedTermIds.size,\n          addedTermCount: addedTermIds.size,\n          removedTermCount: removedTermIds.size,\n          rebuiltDocCount: touchedDocs.length,\n          durationMs: endTimer(start),\n        });\n      }\n\n      if (watchLogger.isLevelEnabled('debug')) {\n        watchLogger.debug('SmartLink watch diff', () => ({\n          triggeredBy: Array.from(relevantPaths).map((p) => formatSiteRelativePath(p)),\n          impactedTermIds: Array.from(impactedTermIds),\n          changedTermIds: Array.from(changedTermIds),\n          addedTermIds: Array.from(addedTermIds),\n          removedTermIds: Array.from(removedTermIds),\n          rebuiltDocs: touchedDocs.map((p) => formatSiteRelativePath(p)),\n        }));\n      }\n    },\n\n    async contentLoaded({ content, actions }: { content: Content; actions: PluginContentLoadedActions }) {\n      if (!content) return;\n      const { notes, registry, entries, opts } = content;\n\n      const start = startTimer(contentLogger, 'info', 'debug');\n\n      if (contentLogger.isLevelEnabled('debug')) {\n        contentLogger.debug('Writing SmartLink generated modules', {\n          noteCount: notes.length,\n          registryModule: registry.filename,\n        });\n      }\n\n      for (const note of notes) {\n        await actions.createData(note.filename, note.contents);\n      }\n      await actions.createData(registry.filename, registry.contents);\n\n      const tooltipComponentsModule = emitTooltipComponentsModule(\n        opts.tooltipComponents ?? {}\n      );\n      await actions.createData(\n        tooltipComponentsModule.filename,\n        tooltipComponentsModule.contents\n      );\n\n      const enrichedEntries = entries.map((entry) => ({\n        ...entry,\n        docId: entry.docId ?? computeDocIdForEntry(entry),\n      }));\n\n      const docsContent = loadDocsContentFromGenerated(_context.generatedFilesDir);\n      const resolved = resolveEntryPermalinks({\n        siteDir: _context.siteDir,\n        entries: enrichedEntries,\n        docsContent,\n      });\n\n      stats.resolvedCount = resolved.length;\n\n      publishGlobalData(actions, opts, resolved);\n\n      if (contentLogger.isLevelEnabled('info')) {\n        contentLogger.info('Published SmartLink global data', {\n          entryCount: resolved.length,\n          durationMs: endTimer(start),\n        });\n      }\n\n      if (contentLogger.isLevelEnabled('trace') && resolved.length > 0) {\n        contentLogger.trace('Resolved SmartLink permalinks', () => ({\n          permalinks: resolved.map((entry) => entry.permalink ?? null),\n        }));\n      }\n    },\n\n    async postBuild() {\n      const termProcessingMs = consumeTermProcessingMs();\n      const indexBuildMs = consumeIndexBuildMs();\n      stats.termProcessingMs = termProcessingMs;\n      stats.indexBuildMs = indexBuildMs;\n\n      if (postBuildLogger.isLevelEnabled('info')) {\n        postBuildLogger.info('SmartLink build complete', {\n          entryCount: stats.resolvedCount,\n          noteCount: stats.noteCount,\n          filesScanned: stats.scannedFileCount,\n          reusedPrimedFiles: stats.reusedPrimedFiles,\n          registryBytes: stats.registryBytes,\n          indexBuildMs: stats.indexBuildMs,\n          termProcessingMs: stats.termProcessingMs,\n        });\n      }\n\n      if (postBuildLogger.isLevelEnabled('debug')) {\n        postBuildLogger.debug('Term processing duration', {\n          termProcessingMs,\n        });\n        postBuildLogger.debug('Index build duration', {\n          indexBuildMs,\n        });\n      }\n    },\n\n    getThemePath() {\n      return join(moduleDir, 'theme', 'runtime');\n    },\n\n    getTypeScriptThemePath() {\n      return join(moduleDir, 'theme');\n    },\n\n    getClientModules() {\n      return [join(moduleDir, 'theme/styles.css')];\n    },\n  };\n  return plugin;\n}\n\nfunction deriveDocId(folderAbsPath: string, sourcePath: string | undefined): string | undefined {\n  if (!sourcePath) return undefined;\n  const rel = relative(folderAbsPath, sourcePath);\n  if (!rel || rel.startsWith('..')) return undefined;\n  const normalized = rel.replace(/\\\\/g, '/');\n  const withoutExt = normalized.replace(/\\.[^./]+$/u, '');\n  return withoutExt || undefined;\n}\n\nfunction loadDocsContentFromGenerated(\n  generatedFilesDir: string,\n): Record<string, DocsLoadedContent | undefined> {\n  const root = join(generatedFilesDir, 'docusaurus-plugin-content-docs');\n  const result: Record<string, DocsLoadedContent> = {};\n\n  let pluginIds: string[] = [];\n  try {\n    pluginIds = readdirSync(root);\n  } catch {\n    return result;\n  }\n\n  for (const pluginId of pluginIds) {\n    const pluginDir = join(root, pluginId);\n    let stats;\n    try {\n      stats = statSync(pluginDir);\n    } catch {\n      continue;\n    }\n    if (!stats.isDirectory()) continue;\n\n    const docs: any[] = [];\n    for (const file of readdirSync(pluginDir)) {\n      if (!file.endsWith('.json')) continue;\n      if (file.startsWith('__')) continue;\n      const abs = join(pluginDir, file);\n      try {\n        const parsed = JSON.parse(readFileSync(abs, 'utf8'));\n        if (parsed && typeof parsed === 'object' && typeof parsed.permalink === 'string') {\n          docs.push(parsed);\n        }\n      } catch {\n        continue;\n      }\n    }\n\n    result[pluginId] = {\n      loadedVersions: [\n        {\n          docs,\n        } as any,\n      ],\n    } as DocsLoadedContent;\n  }\n\n  return result;\n}\n"]}